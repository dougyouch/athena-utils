#!/usr/bin/env ruby

require 'athena-utils'
require 'optparse'

options = {
  database: nil,
  work_group: 'primary',
  query: nil,
  save: nil,
  console: false,
  pretty_print: false,
  jsonl: false
}
OptionParser.new do |opts|
  opts.banner = 'Usage: athena [options]'

  opts.on('-d', '--database DATABASE', 'Athena DB') do |v|
    options[:database] = v
  end

  opts.on('-w', '--work-group WORK_GROUP', 'Athena Work Group, default: primary') do |v|
    options[:work_group] = v
  end

  opts.on('-e', '--execute QUERY', 'Execute SQL Query') do |v|
    options[:query] = v =~ /^@/ ? File.read(v[1..-1]) : v
  end

  opts.on('-s', '--save FILE', 'Save query results to file') do |v|
    options[:save] = v
  end

  opts.on('-c', '--console', 'Execute query and makes results available in irb') do
    options[:console] = true
  end

  opts.on('-p', '--pretty-print', 'Display results vertically') do
    options[:pretty_print] = true
  end

  opts.on('-j', '--jsonl', 'Display results in JSONL format') do
    options[:jsonl] = true
  end
end.parse!

raise('must specify a database') unless options[:database]
raise('must specify work group for athean queries') unless options[:work_group]

@athena = AthenaUtils::AthenaClient.new(options[:database], options[:work_group])
def athena
  @athena
end

if options[:query]
  @results = athena.query(options[:query])
  def results
    @results
  end

  if options[:save]
    if options[:jsonl]
      results.save_in_jsonl(options[:save])
    else
      results.save(options[:save])
    end
    exit
  end

  if options[:console]
    require 'irb'
    IRB.start
  elsif options[:pretty_print]
    cnt = 1
    results.each do |row|
      print "\n" if cnt > 1
      puts "-------------------- Result #{cnt} --------------------"
      row.each do |header, value|
        puts "#{header}: #{value}"
      end
      cnt += 1
    end
  elsif options[:jsonl]
    require 'json'

    results.each do |row|
      print row.to_json + "\n"
    end
  else
    io = results.s3_object.body
    while chunk = io.read(8192)
      print chunk
    end
  end
else
  require 'irb'
  IRB.start
end
